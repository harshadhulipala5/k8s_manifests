
Reference : https://www.tecmint.com/install-kubernetes-cluster-on-centos-7/
			https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/
			https://computingforgeeks.com/join-new-kubernetes-worker-node-to-existing-cluster/

Master Node 
---------------------

setenforce 0

sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux


firewall-cmd --permanent --add-port=22/tcp;
firewall-cmd --permanent --add-port=6443/tcp;
firewall-cmd --permanent --add-port=2379-2380/tcp;
firewall-cmd --permanent --add-port=10250/tcp;
firewall-cmd --permanent --add-port=10251/tcp;
firewall-cmd --permanent --add-port=10252/tcp;
firewall-cmd --permanent --add-port=30000-32767/tcp;
firewall-cmd --reload

modprobe br_netfilter
echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables

cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF

yum install kubeadm -y 

systemctl enable kubelet
systemctl start kubelet

swapoff -a
kubeadm init --apiserver-advertise-address <hostonly ip> --pod-network-cidr


kubeadm init --apiserver-advertise-address 192.168.191.3

Generated Token 

kubeadm join 192.168.191.3:6443 --token sbbqph.b62l08phpcw4q1bg \
    --discovery-token-ca-cert-hash sha256:35e5e87f61d540c34a7ea81f6aa51cc15076a5f645b4b36b36f29fc1eca1e28c
	
mkdir -p $HOME/.kube
cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config

https://github.com/coreos/flannel#flannel

kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

kubectl get pods --all-namespaces

kubectl get nodes

Control plane node isolation
By default, your cluster will not schedule Pods on the control-plane node for security reasons. If you want to be able to schedule Pods on the control-plane node, for example for a single-machine Kubernetes cluster for development, run:

kubectl taint nodes --all node-role.kubernetes.io/master-


---------------------

Slave Node 

---------------------

# setenforce 0
# sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux

 firewall-cmd --permanent --add-port=6783/tcp;
 firewall-cmd --permanent --add-port=10250/tcp;
 firewall-cmd --permanent --add-port=10255/tcp;
 firewall-cmd --permanent --add-port=30000-32767/tcp;
 firewall-cmd  --reload;
 echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables;

cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF


yum install kubeadm docker -y 

# systemctl enable docker
# systemctl start docker
# systemctl enable kubelet
# systemctl start kubelet

kubeadm join 192.168.191.3:6443 --token 3dtwqq.sd7w9320emrchk6f     --discovery-token-ca-cert-hash sha256:35e5e87f61d540c34a7ea81f6aa51cc15076a5f645b4b36b36f29fc1eca1e28c
	

This node has joined the cluster:
* Certificate signing request was sent to apiserver and a response was received.
* The Kubelet was informed of the new secure connection details.

Run 'kubectl get nodes' on the control-plane to see this node join the cluster.

--------------------------------------------------------------------------------

kubeadm token create --print-join-command


